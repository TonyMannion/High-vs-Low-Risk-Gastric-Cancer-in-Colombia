library('BiocManager')
library("ggpubr")
library("limma")
library("vegan")
library(tidyverse)
library(phyloseq); packageVersion("phyloseq")
library(microbiome)

#######delete all variables to start over######
rm(list=ls())
###############################################

dir.create("all_taxa")

#######delete all variables to start over######
rm(list=ls())
###############################################

##########raw reads##########

#' script to convert the output of a metaphlan_taxonomic_table_joined.tsv object to a otu_table + tax_table object
#' 
#' 
#' @param phyloseq object 
#' @param 
#' @export
#' @examples
#' mtph_tbru_phy <- metaphlanToPhyloseq(tax = mtph_tbru, split = "|")
metaphlanToPhyloseq <- function(
  tax,
  metadat=NULL,
  simplenames=TRUE,
  roundtointeger=FALSE,
  split="|"){
  ## tax is a matrix or data.frame with the table of taxonomic abundances, rows are taxa, columns are samples
  ## metadat is an optional data.frame of specimen metadata, rows are samples, columns are variables
  ## if simplenames=TRUE, use only the most detailed level of taxa names in the final object
  ## if roundtointeger=TRUE, values will be rounded to the nearest integer
  xnames = rownames(tax)
  shortnames = gsub(paste0(".+\\", split), "", xnames)
  if(simplenames){
    rownames(tax) = shortnames
  }
  if(roundtointeger){
    tax = round(tax * 1e4)
  }
  x2 = strsplit(xnames, split=split, fixed=TRUE)
  taxmat = matrix(NA, ncol=max(sapply(x2, length)), nrow=length(x2))
  colnames(taxmat) = c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species", "Strain")[1:ncol(taxmat)]
  rownames(taxmat) = rownames(tax)
  for (i in 1:nrow(taxmat)){
    taxmat[i, 1:length(x2[[i]])] <- x2[[i]]
  }
  taxmat = gsub("[a-z]__", "", taxmat)
  taxmat = phyloseq::tax_table(taxmat)
  otutab = phyloseq::otu_table(tax, taxa_are_rows=TRUE)
  if(is.null(metadat)){
    res = phyloseq::phyloseq(taxmat, otutab)
  }else{
    res = phyloseq::phyloseq(taxmat, otutab, phyloseq::sample_data(metadat))
  }
  return(res)
}
#end of script


#load mpa data and metadata tables
mphlanin <- read.csv("metagenomics_modified_db_no_F3.txt", sep = "\t", strip.white = T, stringsAsFactors = F, row.names = 1)
metadata <- read.delim("meta_no_F3.txt", header=TRUE, sep = "\t",row.names = 1)
phyloseqin= metaphlanToPhyloseq(mphlanin, metadat = metadata)
#phyloseqin = subset_taxa(phyloseqin, Kingdom == "all_taxa")

#Bar plot raw reads at kingdom level (rank 2)
plot_bar(phyloseqin, fill = 'Kingdom', x='Location')+ facet_wrap(~Sex, scales='free_x', nrow=1) + xlab('Sample') + ylab('Reads')
ggsave('all_taxa/kingdom_level_raw_reads_bar_Sex.tiff' , width=7, height=7, units=c("in"))

#Bar plot raw reads at phylum levels (rank 2)
plot_bar(phyloseqin, fill = 'Phylum', x='Location')+ facet_wrap(~Sex, scales='free_x', nrow=1) + xlab('Sample') + ylab('Reads')
ggsave('all_taxa/phylum_level_raw_reads_bar_Sex.tiff' , width=7, height=7, units=c("in"))

#Bar plot raw reads at top 10 kingdom
phyloseqin_merged = tax_glom(phyloseqin, taxrank="Kingdom", NArm=FALSE)
TopNOTUs <- names(sort(taxa_sums(phyloseqin_merged), TRUE)[1:10])
Top10 <- prune_taxa(TopNOTUs, phyloseqin_merged)
plot_bar(Top10, fill = 'Kingdom', x='Location')+ facet_wrap(~Sex, scales='free_x', nrow=1) + xlab('Sample') + ylab('Reads')
ggsave('all_taxa/top10_kingdom_raw_reads_bar_Sex.tiff' , width=7, height=7, units=c("in"))

#Bar plot raw reads at top 10 phylum
phyloseqin_merged = tax_glom(phyloseqin, taxrank="Phylum", NArm=FALSE)
TopNOTUs <- names(sort(taxa_sums(phyloseqin_merged), TRUE)[1:10])
Top10 <- prune_taxa(TopNOTUs, phyloseqin_merged)
plot_bar(Top10, fill = 'Phylum', x='Location')+ facet_wrap(~Sex, scales='free_x', nrow=1) + xlab('Sample') + ylab('Reads')
ggsave('all_taxa/top10_phylum_raw_reads_bar_Sex.tiff' , width=7, height=7, units=c("in"))

#Bar plot raw reads at top 10 class
phyloseqin_merged = tax_glom(phyloseqin, taxrank="Class", NArm=FALSE)
TopNOTUs <- names(sort(taxa_sums(phyloseqin_merged), TRUE)[1:10])
Top10 <- prune_taxa(TopNOTUs, phyloseqin_merged)
plot_bar(Top10, fill = 'Class', x='Location')+ facet_wrap(~Sex, scales='free_x', nrow=1) + xlab('Sample') + ylab('Reads')
ggsave('all_taxa/top10_class_raw_reads_bar_Sex.tiff' , width=7, height=7, units=c("in"))

#Bar plot raw reads at top 10 order
phyloseqin_merged = tax_glom(phyloseqin, taxrank="Order", NArm=FALSE)
TopNOTUs <- names(sort(taxa_sums(phyloseqin_merged), TRUE)[1:10])
Top10 <- prune_taxa(TopNOTUs, phyloseqin_merged)
plot_bar(Top10, fill = 'Order', x='Location')+ facet_wrap(~Sex, scales='free_x', nrow=1) + xlab('Sample') + ylab('Reads')
ggsave('all_taxa/top10_order_raw_reads_bar_Sex.tiff' , width=7, height=7, units=c("in"))

#Bar plot raw reads at top 10 family
phyloseqin_merged = tax_glom(phyloseqin, taxrank="Family", NArm=FALSE)
TopNOTUs <- names(sort(taxa_sums(phyloseqin_merged), TRUE)[1:10])
Top10 <- prune_taxa(TopNOTUs, phyloseqin_merged)
plot_bar(Top10, fill = 'Family', x='Location')+ facet_wrap(~Sex, scales='free_x', nrow=1) + xlab('Sample') + ylab('Reads')
ggsave('all_taxa/top10_family_raw_reads_bar_Sex.tiff' , width=7, height=7, units=c("in"))

#Bar plot raw reads at top 10 genus
phyloseqin_merged = tax_glom(phyloseqin, taxrank="Genus", NArm=FALSE)
TopNOTUs <- names(sort(taxa_sums(phyloseqin_merged), TRUE)[1:10])
Top10 <- prune_taxa(TopNOTUs, phyloseqin_merged)
plot_bar(Top10, fill = 'Genus', x='Location')+ facet_wrap(~Sex, scales='free_x', nrow=1) + xlab('Sample') + ylab('Reads')
ggsave('all_taxa/top10_genus_raw_reads_bar_Sex.tiff' , width=7, height=7, units=c("in"))

#Bar plot abudance reads at top 10 species
phyloseqin_merged = tax_glom(phyloseqin, taxrank="Species", NArm=FALSE)
TopNOTUs <- names(sort(taxa_sums(phyloseqin_merged), TRUE)[1:10])
Top10 <- prune_taxa(TopNOTUs, phyloseqin_merged)
plot_bar(Top10, fill = 'Species', x='Location')+ facet_wrap(~Sex, scales='free_x', nrow=1) + xlab('Sample') + ylab('Reads')
ggsave('all_taxa/top10_species_raw_reads_bar_Sex.tiff' , width=7, height=7, units=c("in"))

#######delete all variables to start over######
rm(list=ls())
###############################################


##########abudances##########
#' script to convert the output of a metaphlan_taxonomic_table_joined.tsv object to a otu_table + tax_table object
#' 
#' 
#' @param phyloseq object 
#' @param 
#' @export
#' @examples
#' mtph_tbru_phy <- metaphlanToPhyloseq(tax = mtph_tbru, split = "|")
metaphlanToPhyloseq <- function(
  tax,
  metadat=NULL,
  simplenames=TRUE,
  roundtointeger=FALSE,
  split="|"){
  ## tax is a matrix or data.frame with the table of taxonomic abundances, rows are taxa, columns are samples
  ## metadat is an optional data.frame of specimen metadata, rows are samples, columns are variables
  ## if simplenames=TRUE, use only the most detailed level of taxa names in the final object
  ## if roundtointeger=TRUE, values will be rounded to the nearest integer
  xnames = rownames(tax)
  shortnames = gsub(paste0(".+\\", split), "", xnames)
  if(simplenames){
    rownames(tax) = shortnames
  }
  if(roundtointeger){
    tax = round(tax * 1e4)
  }
  x2 = strsplit(xnames, split=split, fixed=TRUE)
  taxmat = matrix(NA, ncol=max(sapply(x2, length)), nrow=length(x2))
  colnames(taxmat) = c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species", "Strain")[1:ncol(taxmat)]
  rownames(taxmat) = rownames(tax)
  for (i in 1:nrow(taxmat)){
    taxmat[i, 1:length(x2[[i]])] <- x2[[i]]
  }
  taxmat = gsub("[a-z]__", "", taxmat)
  taxmat = phyloseq::tax_table(taxmat)
  otutab = phyloseq::otu_table(tax, taxa_are_rows=TRUE)
  if(is.null(metadat)){
    res = phyloseq::phyloseq(taxmat, otutab)
  }else{
    res = phyloseq::phyloseq(taxmat, otutab, phyloseq::sample_data(metadat))
  }
  return(res)
}
#end of script
#load mpa data and metadata tables
mphlanin <- read.csv("metagenomics_modified_db_no_F3.txt", sep = "\t", strip.white = T, stringsAsFactors = F, row.names = 1)
metadata <- read.delim("meta_no_F3.txt", header=TRUE, sep = "\t",row.names = 1)
phyloseqin= metaphlanToPhyloseq(mphlanin, metadat = metadata)
#phyloseqin = subset_taxa(phyloseqin, Kingdom == "all_taxa")

#convert to % abundances
phyloseqin <- microbiome::transform(phyloseqin, "compositional")

#Bar plot abudance reads at kingdom level (rank 2)
plot_bar(phyloseqin, fill = 'Kingdom', x='Location')+ facet_wrap(~Sex, scales='free_x', nrow=1) + xlab('Sample') + ylab('Reads')
ggsave('all_taxa/kingdom_level_abudance_reads_bar_Sex.tiff' , width=7, height=7, units=c("in"))

#Bar plot abudance reads at phylum levels (rank 2)
plot_bar(phyloseqin, fill = 'Phylum', x='Location')+ facet_wrap(~Sex, scales='free_x', nrow=1) + xlab('Sample') + ylab('Reads')
ggsave('all_taxa/phylum_level_abudance_reads_bar_Sex.tiff' , width=7, height=7, units=c("in"))

#Bar plot abudance reads at top 10 kingdom
phyloseqin_merged = tax_glom(phyloseqin, taxrank="Kingdom", NArm=FALSE)
TopNOTUs <- names(sort(taxa_sums(phyloseqin_merged), TRUE)[1:10])
Top10 <- prune_taxa(TopNOTUs, phyloseqin_merged)
plot_bar(Top10, fill = 'Kingdom', x='Location')+ facet_wrap(~Sex, scales='free_x', nrow=1) + xlab('Sample') + ylab('Reads')
ggsave('all_taxa/top10_kingdom_abudance_reads_bar_Sex.tiff' , width=7, height=7, units=c("in"))

#Bar plot abudance reads at top 10 phylum
phyloseqin_merged = tax_glom(phyloseqin, taxrank="Phylum", NArm=FALSE)
TopNOTUs <- names(sort(taxa_sums(phyloseqin_merged), TRUE)[1:10])
Top10 <- prune_taxa(TopNOTUs, phyloseqin_merged)
plot_bar(Top10, fill = 'Phylum', x='Location')+ facet_wrap(~Sex, scales='free_x', nrow=1) + xlab('Sample') + ylab('Reads')
ggsave('all_taxa/top10_phylum_abudance_reads_bar_Sex.tiff' , width=7, height=7, units=c("in"))

#Bar plot abudance reads at top 10 class
phyloseqin_merged = tax_glom(phyloseqin, taxrank="Class", NArm=FALSE)
TopNOTUs <- names(sort(taxa_sums(phyloseqin_merged), TRUE)[1:10])
Top10 <- prune_taxa(TopNOTUs, phyloseqin_merged)
plot_bar(Top10, fill = 'Class', x='Location')+ facet_wrap(~Sex, scales='free_x', nrow=1) + xlab('Sample') + ylab('Reads')
ggsave('all_taxa/top10_class_abudance_reads_bar_Sex.tiff' , width=7, height=7, units=c("in"))

#Bar plot abudance reads at top 10 order
phyloseqin_merged = tax_glom(phyloseqin, taxrank="Order", NArm=FALSE)
TopNOTUs <- names(sort(taxa_sums(phyloseqin_merged), TRUE)[1:10])
Top10 <- prune_taxa(TopNOTUs, phyloseqin_merged)
plot_bar(Top10, fill = 'Order', x='Location')+ facet_wrap(~Sex, scales='free_x', nrow=1) + xlab('Sample') + ylab('Reads')
ggsave('all_taxa/top10_order_abudance_reads_bar_Sex.tiff' , width=7, height=7, units=c("in"))

#Bar plot abudance reads at top 10 family
phyloseqin_merged = tax_glom(phyloseqin, taxrank="Family", NArm=FALSE)
TopNOTUs <- names(sort(taxa_sums(phyloseqin_merged), TRUE)[1:10])
Top10 <- prune_taxa(TopNOTUs, phyloseqin_merged)
plot_bar(Top10, fill = 'Family', x='Location')+ facet_wrap(~Sex, scales='free_x', nrow=1) + xlab('Sample') + ylab('Reads')
ggsave('all_taxa/top10_family_abudance_reads_bar_Sex.tiff' , width=7, height=7, units=c("in"))

#Bar plot abudance reads at top 10 genus
phyloseqin_merged = tax_glom(phyloseqin, taxrank="Genus", NArm=FALSE)
TopNOTUs <- names(sort(taxa_sums(phyloseqin_merged), TRUE)[1:10])
Top10 <- prune_taxa(TopNOTUs, phyloseqin_merged)
plot_bar(Top10, fill = 'Genus', x='Location')+ facet_wrap(~Sex, scales='free_x', nrow=1) + xlab('Sample') + ylab('Reads')
ggsave('all_taxa/top10_genus_abudance_reads_bar_Sex.tiff' , width=7, height=7, units=c("in"))

#Bar plot abudance reads at top 10 species
phyloseqin_merged = tax_glom(phyloseqin, taxrank="Species", NArm=FALSE)
TopNOTUs <- names(sort(taxa_sums(phyloseqin_merged), TRUE)[1:10])
Top10 <- prune_taxa(TopNOTUs, phyloseqin_merged)
plot_bar(Top10, fill = 'Species', x='Location')+ facet_wrap(~Sex, scales='free_x', nrow=1) + xlab('Sample') + ylab('Reads')
ggsave('all_taxa/top10_species_abudance_reads_bar_Sex.tiff' , width=7, height=7, units=c("in"))

#######delete all variables to start over######
rm(list=ls())
###############################################


##########alpha diversity##########
#' script to convert the output of a metaphlan_taxonomic_table_joined.tsv object to a otu_table + tax_table object
#' 
#' 
#' @param phyloseq object 
#' @param 
#' @export
#' @examples
#' mtph_tbru_phy <- metaphlanToPhyloseq(tax = mtph_tbru, split = "|")
metaphlanToPhyloseq <- function(
  tax,
  metadat=NULL,
  simplenames=TRUE,
  roundtointeger=FALSE,
  split="|"){
  ## tax is a matrix or data.frame with the table of taxonomic abundances, rows are taxa, columns are samples
  ## metadat is an optional data.frame of specimen metadata, rows are samples, columns are variables
  ## if simplenames=TRUE, use only the most detailed level of taxa names in the final object
  ## if roundtointeger=TRUE, values will be rounded to the nearest integer
  xnames = rownames(tax)
  shortnames = gsub(paste0(".+\\", split), "", xnames)
  if(simplenames){
    rownames(tax) = shortnames
  }
  if(roundtointeger){
    tax = round(tax * 1e4)
  }
  x2 = strsplit(xnames, split=split, fixed=TRUE)
  taxmat = matrix(NA, ncol=max(sapply(x2, length)), nrow=length(x2))
  colnames(taxmat) = c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species", "Strain")[1:ncol(taxmat)]
  rownames(taxmat) = rownames(tax)
  for (i in 1:nrow(taxmat)){
    taxmat[i, 1:length(x2[[i]])] <- x2[[i]]
  }
  taxmat = gsub("[a-z]__", "", taxmat)
  taxmat = phyloseq::tax_table(taxmat)
  otutab = phyloseq::otu_table(tax, taxa_are_rows=TRUE)
  if(is.null(metadat)){
    res = phyloseq::phyloseq(taxmat, otutab)
  }else{
    res = phyloseq::phyloseq(taxmat, otutab, phyloseq::sample_data(metadat))
  }
  return(res)
}
#end of script

#load mpa data and metadata tables
mphlanin <- read.csv("metagenomics_modified_db_no_F3.txt", sep = "\t", strip.white = T, stringsAsFactors = F, row.names = 1)
metadata <- read.delim("meta_no_F3.txt", header=TRUE, sep = "\t",row.names = 1)
phyloseqin= metaphlanToPhyloseq(mphlanin, metadat = metadata)
#phyloseqin = subset_taxa(phyloseqin, Kingdom == "all_taxa")
phyloseqin = tax_glom(phyloseqin, taxrank="Genus", NArm=FALSE)

#alpha diversity 
plot_richness(phyloseqin, x="Sex") + geom_boxplot() +geom_point() + xlab('')
ggsave('all_taxa/alpha_diversity_all_metrics_Sex.tiff' , width=7, height=7, units=c("in"))
plot_richness(phyloseqin, x="Sex", measures=c("Observed", "Chao1", "Shannon", "Simpson")) + geom_boxplot() +geom_point()+ xlab('')
ggsave('all_taxa/alpha_diversity_observed_chao1_shannon_simpson_Sex.tiff' , width=7, height=7, units=c("in"))

#statistical analysis of alpha diversity 
rich = estimate_richness(phyloseqin)

sink(file = "all_taxa/Observed_alpha_test_stats_Sex.txt")
pairwise.wilcox.test(rich$Observed, sample_data(phyloseqin)$Sex)
sink(file = NULL)

sink(file = "all_taxa/Chao1_alpha_test_stats_Sex.txt")
pairwise.wilcox.test(rich$Chao1, sample_data(phyloseqin)$Sex)
sink(file = NULL)

sink(file = "all_taxa/Shannon_alpha_test_stats_Sex.txt")
pairwise.wilcox.test(rich$Shannon, sample_data(phyloseqin)$Sex)
sink(file = NULL)

sink(file = "all_taxa/Simpson_alpha_test_stats_Sex.txt")
pairwise.wilcox.test(rich$Simpson, sample_data(phyloseqin)$Sex)
sink(file = NULL)

#######delete all variables to start over######
rm(list=ls())
###############################################


dir.create("all_taxa")

#######delete all variables to start over######
rm(list=ls())
###############################################

##########Beta diversity - PCA with Aitchison Distance Correction##########
##########Including Multivariate comparisons####################
#' script to convert the output of a metaphlan_taxonomic_table_joined.tsv object to a otu_table + tax_table object
#' 
#' 
#' @param phyloseq object 
#' @param 
#' @export
#' @examples
#' mtph_tbru_phy <- metaphlanToPhyloseq(tax = mtph_tbru, split = "|")
metaphlanToPhyloseq <- function(
  tax,
  metadat=NULL,
  simplenames=TRUE,
  roundtointeger=FALSE,
  split="|"){
  ## tax is a matrix or data.frame with the table of taxonomic abundances, rows are taxa, columns are samples
  ## metadat is an optional data.frame of specimen metadata, rows are samples, columns are variables
  ## if simplenames=TRUE, use only the most detailed level of taxa names in the final object
  ## if roundtointeger=TRUE, values will be rounded to the nearest integer
  xnames = rownames(tax)
  shortnames = gsub(paste0(".+\\", split), "", xnames)
  if(simplenames){
    rownames(tax) = shortnames
  }
  if(roundtointeger){
    tax = round(tax * 1e4)
  }
  x2 = strsplit(xnames, split=split, fixed=TRUE)
  taxmat = matrix(NA, ncol=max(sapply(x2, length)), nrow=length(x2))
  colnames(taxmat) = c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species", "Strain")[1:ncol(taxmat)]
  rownames(taxmat) = rownames(tax)
  for (i in 1:nrow(taxmat)){
    taxmat[i, 1:length(x2[[i]])] <- x2[[i]]
  }
  taxmat = gsub("[a-z]__", "", taxmat)
  taxmat = phyloseq::tax_table(taxmat)
  otutab = phyloseq::otu_table(tax, taxa_are_rows=TRUE)
  if(is.null(metadat)){
    res = phyloseq::phyloseq(taxmat, otutab)
  }else{
    res = phyloseq::phyloseq(taxmat, otutab, phyloseq::sample_data(metadat))
  }
  return(res)
}
#end of script

#load mpa data and metadata tables
mphlanin <- read.csv("metagenomics_modified_db_no_F3.txt", sep = "\t", strip.white = T, stringsAsFactors = F, row.names = 1)
metadata <- read.delim("meta_no_F3.txt", header=TRUE, sep = "\t",row.names = 1)
phyloseqin= metaphlanToPhyloseq(mphlanin, metadat = metadata)
#phyloseqin = subset_taxa(phyloseqin, Kingdom == "all_taxa")
phyloseqin = tax_glom(phyloseqin, taxrank="Genus", NArm=FALSE)

#clr-transformed compositions of otu table
(ps_clr <- microbiome::transform(phyloseqin, "clr"))


#Aitchison Distance ordination
ord_clr <- phyloseq::ordinate(ps_clr, "PCoA", "euclidean")
plot_ordination(ps_clr, ord_clr, type="Sample", color="Sex")+ geom_point(size = 4)+ geom_text(mapping=aes(label=Location),size=4,vjust=1.5)+stat_chull(aes(color = Sex, fill = Sex), alpha = 0.1, geom = "polygon")
ggsave('all_taxa/Aitchison_PCA_plot_Sex_chull.tiff' , width=7, height=7, units=c("in"))

#Permutational ANOVA (PERMANOVA) analysis with adonis: partitioning the sums of squares for the within- and between-cluster components using the concept of centroids
#adonis significant p-value --> reject the null hypothesis that our Sexs have the same centroid.
distances = phyloseq::distance(ps_clr, method="euclidean")
adonis(distances ~ sample_data(ps_clr)$Sex)

sink(file = "all_taxa/adonis_Sex.txt")
adonis(distances ~ sample_data(ps_clr)$Sex)
sink(file = NULL)

#Analysis of Similarities (ANOSIM): permutational non-parametric test of significance of the sample-Sexing against a null-hypothesis. identifies if the between Sexs difference is larger than the within Sexs difference
Sex = get_variable(ps_clr, "Sex")
anosim(distances, Sex)

sink(file = "all_taxa/anosim_Sex.txt")
anosim(distances, Sex)
sink(file = NULL)

#test  multivariate test for homogeneity of Sex dispersions (variances) with betadisper: ADONIS can be confounded by differences in dispersion (or spread)
dispr <- vegan::betadisper(distances, phyloseq::sample_data(ps_clr)$Sex)
dispr

sink(file = "all_taxa/dispr_Sex.txt")
dispr
sink(file = NULL)

tiff('all_taxa/Aitchison_betadisper_boxplot_Sex.tiff',width =7, height = 7,units ='in',res=100)
boxplot(dispr, main = "", xlab = "")
dev.off()
permutest(dispr)

sink(file = "all_taxa/permutest_dispr_Sex.txt")
permutest(dispr)
sink(file = NULL)

#betadisper results are not significant, meaning we cannot reject the null hypothesis that our Sexs have the same dispersions. This means we can be more confident that  adonis result is a real result, and not due to differences in Sex dispersions
#betadisper results are significant = datasets do not have the same variances. can not simply say that the communities consist of different OTUs. Among the two Sexs there is a difference in the abundances between the OTUs. Or better the evenness is different between these two Sexs.check alpha diversity as an indication that the evenness between our Sexs is different

#######references#######
#https://academic.oup.com/bib/article/21/6/1954/5643537#218012433
#https://evayiwenwang.github.io/Managing_batch_effects/adjust.html
########################


#################################
### Perform differential abundance analysis using a generalized linear model on clr transformed abundances
#################################

#######delete all variables to start over######
rm(list=ls())
###############################################

##########Beta diversity - PCA with Aitchison Distance##########
##########Including Multivariate comparisons####################
#' script to convert the output of a metaphlan_taxonomic_table_joined.tsv object to a otu_table + tax_table object
#' 
#' 
#' @param phyloseq object 
#' @param 
#' @export
#' @examples
#' mtph_tbru_phy <- metaphlanToPhyloseq(tax = mtph_tbru, split = "|")
metaphlanToPhyloseq <- function(
  tax,
  metadat=NULL,
  simplenames=TRUE,
  roundtointeger=FALSE,
  split="|"){
  ## tax is a matrix or data.frame with the table of taxonomic abundances, rows are taxa, columns are samples
  ## metadat is an optional data.frame of specimen metadata, rows are samples, columns are variables
  ## if simplenames=TRUE, use only the most detailed level of taxa names in the final object
  ## if roundtointeger=TRUE, values will be rounded to the nearest integer
  xnames = rownames(tax)
  shortnames = gsub(paste0(".+\\", split), "", xnames)
  if(simplenames){
    rownames(tax) = shortnames
  }
  if(roundtointeger){
    tax = round(tax * 1e4)
  }
  x2 = strsplit(xnames, split=split, fixed=TRUE)
  taxmat = matrix(NA, ncol=max(sapply(x2, length)), nrow=length(x2))
  colnames(taxmat) = c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species", "Strain")[1:ncol(taxmat)]
  rownames(taxmat) = rownames(tax)
  for (i in 1:nrow(taxmat)){
    taxmat[i, 1:length(x2[[i]])] <- x2[[i]]
  }
  taxmat = gsub("[a-z]__", "", taxmat)
  taxmat = phyloseq::tax_table(taxmat)
  otutab = phyloseq::otu_table(tax, taxa_are_rows=TRUE)
  if(is.null(metadat)){
    res = phyloseq::phyloseq(taxmat, otutab)
  }else{
    res = phyloseq::phyloseq(taxmat, otutab, phyloseq::sample_data(metadat))
  }
  return(res)
}
#end of script

#load mpa data and metadata tables
mphlanin <- read.csv("metagenomics_modified_db_no_F3.txt", sep = "\t", strip.white = T, stringsAsFactors = F, row.names = 1)
metadata <- read.delim("meta_no_F3.txt", header=TRUE, sep = "\t",row.names = 1)
phyloseqin= metaphlanToPhyloseq(mphlanin, metadat = metadata)
#phyloseqin = subset_taxa(phyloseqin, Kingdom == "all_taxa")
phyloseqin = tax_glom(phyloseqin, taxrank="Genus", NArm=FALSE)

#clr-transformed compositions of otu table
(ps_clr <- microbiome::transform(phyloseqin, "clr"))

# Apply GLM on clr transformed data for all taxa
results <- data.frame()
for (i in 1:length(taxa_names(ps_clr))){

  asv <- taxa_names(ps_clr)[i]
 
  mod <- glm(as.vector(otu_table(ps_clr)[i]) ~ sample_data(ps_clr)$Sex)
  
  beta <- summary(mod)$coefficients[2,1]
  se <- summary(mod)$coefficients[2,2]
  pval <- summary(mod)$coefficients[2,4]

  results <- rbind(results, data.frame(Representative_ASV = asv,  Beta = beta, SE = se, P = pval))
}

# Perform FDR correction for pvalues
results$FDR_BH <- p.adjust(results$P, method = 'BH')

# Add taxa designations to table
results <- inner_join(results, rownames_to_column(data.frame(tax_table(ps_clr)), "Representative_ASV"), by = "Representative_ASV")

write.table(results, "all_taxa/GLM_CLR_Sex.txt", quote = F, sep="\t", row.names = F)

#################################
### Perform differential abundance testing using using Welch's t-test on clr transformed abundances
#################################

#######delete all variables to start over######
rm(list=ls())
###############################################

##########Beta diversity - PCA with Aitchison Distance##########
##########Including Multivariate comparisons####################
#' script to convert the output of a metaphlan_taxonomic_table_joined.tsv object to a otu_table + tax_table object
#' 
#' 
#' @param phyloseq object 
#' @param 
#' @export
#' @examples
#' mtph_tbru_phy <- metaphlanToPhyloseq(tax = mtph_tbru, split = "|")
metaphlanToPhyloseq <- function(
  tax,
  metadat=NULL,
  simplenames=TRUE,
  roundtointeger=FALSE,
  split="|"){
  ## tax is a matrix or data.frame with the table of taxonomic abundances, rows are taxa, columns are samples
  ## metadat is an optional data.frame of specimen metadata, rows are samples, columns are variables
  ## if simplenames=TRUE, use only the most detailed level of taxa names in the final object
  ## if roundtointeger=TRUE, values will be rounded to the nearest integer
  xnames = rownames(tax)
  shortnames = gsub(paste0(".+\\", split), "", xnames)
  if(simplenames){
    rownames(tax) = shortnames
  }
  if(roundtointeger){
    tax = round(tax * 1e4)
  }
  x2 = strsplit(xnames, split=split, fixed=TRUE)
  taxmat = matrix(NA, ncol=max(sapply(x2, length)), nrow=length(x2))
  colnames(taxmat) = c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species", "Strain")[1:ncol(taxmat)]
  rownames(taxmat) = rownames(tax)
  for (i in 1:nrow(taxmat)){
    taxmat[i, 1:length(x2[[i]])] <- x2[[i]]
  }
  taxmat = gsub("[a-z]__", "", taxmat)
  taxmat = phyloseq::tax_table(taxmat)
  otutab = phyloseq::otu_table(tax, taxa_are_rows=TRUE)
  if(is.null(metadat)){
    res = phyloseq::phyloseq(taxmat, otutab)
  }else{
    res = phyloseq::phyloseq(taxmat, otutab, phyloseq::sample_data(metadat))
  }
  return(res)
}
#end of script

#load mpa data and metadata tables
mphlanin <- read.csv("metagenomics_modified_db_no_F3.txt", sep = "\t", strip.white = T, stringsAsFactors = F, row.names = 1)
metadata <- read.delim("meta_no_F3.txt", header=TRUE, sep = "\t",row.names = 1)
phyloseqin= metaphlanToPhyloseq(mphlanin, metadat = metadata)
#phyloseqin = subset_taxa(phyloseqin, Kingdom == "all_taxa")
phyloseqin = tax_glom(phyloseqin, taxrank="Genus", NArm=FALSE)

#clr-transformed compositions of otu table
(ps_clr <- microbiome::transform(phyloseqin, "clr"))



# Loop t-test for all taxa
results <- data.frame()
for (i in 1:length(taxa_names(ps_clr))){

  asv <- taxa_names(ps_clr)[i]
  
  case_mclr <- mean(otu_table(subset_samples(ps_clr, Sex == "Female"))[i])
  cont_mclr <- mean(otu_table(subset_samples(ps_clr, Sex == "Male"))[i])
  mclrr <- case_mclr/cont_mclr
 
  pval <- t.test(as.vector(otu_table(ps_clr)[i]) ~ sample_data(ps_clr)$Sex)$p.value
  
  results <- rbind(results, data.frame(Representative_ASV = asv, 
                                       Case_Mean_CLR = case_mclr, 
                                       Control_Mean_CLR = cont_mclr, 
                                       Mean_CLR_Ratio = mclrr, 
                                       P = pval))
}
                                 
# Perform FDR correction for pvalues
results$FDR_BH <- p.adjust(results$P, method = 'BH')

# Add taxa designations to table
results <- inner_join(results, rownames_to_column(data.frame(tax_table(ps_clr)), "Representative_ASV"), by = "Representative_ASV")

# Write out results
write.table(results, "all_taxa/t_test_CLR_Sex.txt", quote = F, sep="\t", row.names = F)


#######delete all variables to start over######
rm(list=ls())
###############################################

##########Beta diversity - PCA with Aitchison Distance and removeBatchEffect Correction##########
##########Including Multivariate comparisons####################
#' script to convert the output of a metaphlan_taxonomic_table_joined.tsv object to a otu_table + tax_table object
#' 
#' 
#' @param phyloseq object 
#' @param 
#' @export
#' @examples
#' mtph_tbru_phy <- metaphlanToPhyloseq(tax = mtph_tbru, split = "|")
metaphlanToPhyloseq <- function(
  tax,
  metadat=NULL,
  simplenames=TRUE,
  roundtointeger=FALSE,
  split="|"){
  ## tax is a matrix or data.frame with the table of taxonomic abundances, rows are taxa, columns are samples
  ## metadat is an optional data.frame of specimen metadata, rows are samples, columns are variables
  ## if simplenames=TRUE, use only the most detailed level of taxa names in the final object
  ## if roundtointeger=TRUE, values will be rounded to the nearest integer
  xnames = rownames(tax)
  shortnames = gsub(paste0(".+\\", split), "", xnames)
  if(simplenames){
    rownames(tax) = shortnames
  }
  if(roundtointeger){
    tax = round(tax * 1e4)
  }
  x2 = strsplit(xnames, split=split, fixed=TRUE)
  taxmat = matrix(NA, ncol=max(sapply(x2, length)), nrow=length(x2))
  colnames(taxmat) = c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species", "Strain")[1:ncol(taxmat)]
  rownames(taxmat) = rownames(tax)
  for (i in 1:nrow(taxmat)){
    taxmat[i, 1:length(x2[[i]])] <- x2[[i]]
  }
  taxmat = gsub("[a-z]__", "", taxmat)
  taxmat = phyloseq::tax_table(taxmat)
  otutab = phyloseq::otu_table(tax, taxa_are_rows=TRUE)
  if(is.null(metadat)){
    res = phyloseq::phyloseq(taxmat, otutab)
  }else{
    res = phyloseq::phyloseq(taxmat, otutab, phyloseq::sample_data(metadat))
  }
  return(res)
}
#end of script

#load mpa data and metadata tables
mphlanin <- read.csv("metagenomics_modified_db_no_F3.txt", sep = "\t", strip.white = T, stringsAsFactors = F, row.names = 1)
metadata <- read.delim("meta_no_F3.txt", header=TRUE, sep = "\t",row.names = 1)
phyloseqin= metaphlanToPhyloseq(mphlanin, metadat = metadata)
#phyloseqin = subset_taxa(phyloseqin, Kingdom == "all_taxa")
phyloseqin = tax_glom(phyloseqin, taxrank="Genus", NArm=FALSE)

#clr-transformed compositions of otu table
(ps_clr <- microbiome::transform(phyloseqin, "clr"))

#batch correction
ps_clr.limma <- removeBatchEffect(otu_table(ps_clr), batch = sample_data(ps_clr)$batch)
#remake phyloseq objects
ps_clr.limma.otu=otu_table(ps_clr.limma, taxa_are_rows = TRUE)
ps_clr.tax=tax_table(ps_clr)
mphlanin <- read.csv("metagenomics_modified_db_no_F3.txt", sep = "\t", strip.white = T, stringsAsFactors = F, row.names = 1)
metadata <- read.delim("meta_no_F3.txt", header=TRUE, sep = "\t",row.names = 1)
sampledata = sample_data(metadata)
ps_clr_limma=phyloseq(ps_clr.limma.otu, ps_clr.tax,sampledata)

#Aitchison Distance ordination
ord_clr_limma <- phyloseq::ordinate(ps_clr_limma, "PCoA", "euclidean")
plot_ordination(ps_clr_limma, ord_clr_limma, type="Sample", color="Sex")+ geom_point(size = 4)+ geom_text(mapping=aes(label=Location),size=4,vjust=1.5)+stat_chull(aes(color = Sex, fill = Sex), alpha = 0.1, geom = "polygon")
ggsave('all_taxa/removeBatcheffect_Aitchison_PCA_plot_Sex_chull.tiff' , width=7, height=7, units=c("in"))

#Permutational ANOVA (PERMANOVA) analysis with adonis: partitioning the sums of squares for the within- and between-cluster components using the concept of centroids
#adonis significant p-value --> reject the null hypothesis that our Sexs have the same centroid.
distances = phyloseq::distance(ps_clr_limma, method="euclidean")
adonis(distances ~ sample_data(ps_clr_limma)$Sex)

sink(file = "all_taxa/removeBatcheffect_adonis_Sex.txt")
adonis(distances ~ sample_data(ps_clr_limma)$Sex)
sink(file = NULL)

#Analysis of Similarities (ANOSIM): permutational non-parametric test of significance of the sample-Sexing against a null-hypothesis. identifies if the between Sexs difference is larger than the within Sexs difference
Sex = get_variable(ps_clr_limma, "Sex")
anosim(distances, Sex)

sink(file = "all_taxa/removeBatcheffect_anosim_Sex.txt")
anosim(distances, Sex)
sink(file = NULL)

#test  multivariate test for homogeneity of Sex dispersions (variances) with betadisper: ADONIS can be confounded by differences in dispersion (or spread)
dispr <- vegan::betadisper(distances, phyloseq::sample_data(ps_clr_limma)$Sex)
dispr

sink(file = "all_taxa/removeBatcheffect_dispr_Sex.txt")
dispr
sink(file = NULL)

tiff('all_taxa/removeBatcheffect_Aitchison_betadisper_boxplot_Sex.tiff',width =7, height = 7,units ='in',res=100)
boxplot(dispr, main = "", xlab = "")
dev.off()
permutest(dispr)

sink(file = "all_taxa/removeBatcheffect_permutest_dispr_Sex.txt")
permutest(dispr)
sink(file = NULL)

#betadisper results are not significant, meaning we cannot reject the null hypothesis that our Sexs have the same dispersions. This means we can be more confident that  adonis result is a real result, and not due to differences in Sex dispersions
#betadisper results are significant = datasets do not have the same variances. can not simply say that the communities consist of different OTUs. Among the two Sexs there is a difference in the abundances between the OTUs. Or better the evenness is different between these two Sexs.check alpha diversity as an indication that the evenness between our Sexs is different

#######references#######
#https://academic.oup.com/bib/article/21/6/1954/5643537#218012433
#https://evayiwenwang.github.io/Managing_batch_effects/adjust.html
########################


#################################
### Perform differential abundance analysis using a generalized linear model on clr transformed abundances
#################################

#######delete all variables to start over######
rm(list=ls())
###############################################

##########Beta diversity - PCA with Aitchison Distance and removeBatcheffect Correction##########
##########Including Multivariate comparisons####################
#' script to convert the output of a metaphlan_taxonomic_table_joined.tsv object to a otu_table + tax_table object
#' 
#' 
#' @param phyloseq object 
#' @param 
#' @export
#' @examples
#' mtph_tbru_phy <- metaphlanToPhyloseq(tax = mtph_tbru, split = "|")
metaphlanToPhyloseq <- function(
  tax,
  metadat=NULL,
  simplenames=TRUE,
  roundtointeger=FALSE,
  split="|"){
  ## tax is a matrix or data.frame with the table of taxonomic abundances, rows are taxa, columns are samples
  ## metadat is an optional data.frame of specimen metadata, rows are samples, columns are variables
  ## if simplenames=TRUE, use only the most detailed level of taxa names in the final object
  ## if roundtointeger=TRUE, values will be rounded to the nearest integer
  xnames = rownames(tax)
  shortnames = gsub(paste0(".+\\", split), "", xnames)
  if(simplenames){
    rownames(tax) = shortnames
  }
  if(roundtointeger){
    tax = round(tax * 1e4)
  }
  x2 = strsplit(xnames, split=split, fixed=TRUE)
  taxmat = matrix(NA, ncol=max(sapply(x2, length)), nrow=length(x2))
  colnames(taxmat) = c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species", "Strain")[1:ncol(taxmat)]
  rownames(taxmat) = rownames(tax)
  for (i in 1:nrow(taxmat)){
    taxmat[i, 1:length(x2[[i]])] <- x2[[i]]
  }
  taxmat = gsub("[a-z]__", "", taxmat)
  taxmat = phyloseq::tax_table(taxmat)
  otutab = phyloseq::otu_table(tax, taxa_are_rows=TRUE)
  if(is.null(metadat)){
    res = phyloseq::phyloseq(taxmat, otutab)
  }else{
    res = phyloseq::phyloseq(taxmat, otutab, phyloseq::sample_data(metadat))
  }
  return(res)
}
#end of script

#load mpa data and metadata tables
mphlanin <- read.csv("metagenomics_modified_db_no_F3.txt", sep = "\t", strip.white = T, stringsAsFactors = F, row.names = 1)
metadata <- read.delim("meta_no_F3.txt", header=TRUE, sep = "\t",row.names = 1)
phyloseqin= metaphlanToPhyloseq(mphlanin, metadat = metadata)
#phyloseqin = subset_taxa(phyloseqin, Kingdom == "all_taxa")
phyloseqin = tax_glom(phyloseqin, taxrank="Genus", NArm=FALSE)

#clr-transformed compositions of otu table
(ps_clr <- microbiome::transform(phyloseqin, "clr"))

ps_clr.limma <- removeBatchEffect(otu_table(ps_clr), batch = sample_data(ps_clr)$batch)

#ps_clr into OTU table  

ps_clr.limma.otu=otu_table(ps_clr.limma, taxa_are_rows = TRUE)
ps_clr.tax=tax_table(ps_clr)
mphlanin <- read.csv("metagenomics_modified_db_no_F3.txt", sep = "\t", strip.white = T, stringsAsFactors = F, row.names = 1)
metadata <- read.delim("meta_no_F3.txt", header=TRUE, sep = "\t",row.names = 1)
sampledata = sample_data(metadata)
ps=phyloseq(ps_clr.limma.otu, ps_clr.tax,sampledata)

# Apply GLM on clr transformed data for all taxa
results <- data.frame()
for (i in 1:length(taxa_names(ps))){

  asv <- taxa_names(ps)[i]
 
  mod <- glm(as.vector(otu_table(ps)[i]) ~ sample_data(ps)$Sex)
  
  beta <- summary(mod)$coefficients[2,1]
  se <- summary(mod)$coefficients[2,2]
  pval <- summary(mod)$coefficients[2,4]

  results <- rbind(results, data.frame(Representative_ASV = asv,  Beta = beta, SE = se, P = pval))
}

# Perform FDR correction for pvalues
results$FDR_BH <- p.adjust(results$P, method = 'BH')

# Add taxa designations to table
results <- inner_join(results, rownames_to_column(data.frame(tax_table(ps)), "Representative_ASV"), by = "Representative_ASV")

write.table(results, "all_taxa/removeBatcheffect_GLM_CLR_Sex.txt", quote = F, sep="\t", row.names = F)

#################################
### Perform differential abundance testing using using Welch's t-test on clr transformed abundances
#################################

#######delete all variables to start over######
rm(list=ls())
###############################################

##########Beta diversity - PCA with Aitchison Distance and removeBatchEffect Correction##########
##########Including Multivariate comparisons####################
#' script to convert the output of a metaphlan_taxonomic_table_joined.tsv object to a otu_table + tax_table object
#' 
#' 
#' @param phyloseq object 
#' @param 
#' @export
#' @examples
#' mtph_tbru_phy <- metaphlanToPhyloseq(tax = mtph_tbru, split = "|")
metaphlanToPhyloseq <- function(
  tax,
  metadat=NULL,
  simplenames=TRUE,
  roundtointeger=FALSE,
  split="|"){
  ## tax is a matrix or data.frame with the table of taxonomic abundances, rows are taxa, columns are samples
  ## metadat is an optional data.frame of specimen metadata, rows are samples, columns are variables
  ## if simplenames=TRUE, use only the most detailed level of taxa names in the final object
  ## if roundtointeger=TRUE, values will be rounded to the nearest integer
  xnames = rownames(tax)
  shortnames = gsub(paste0(".+\\", split), "", xnames)
  if(simplenames){
    rownames(tax) = shortnames
  }
  if(roundtointeger){
    tax = round(tax * 1e4)
  }
  x2 = strsplit(xnames, split=split, fixed=TRUE)
  taxmat = matrix(NA, ncol=max(sapply(x2, length)), nrow=length(x2))
  colnames(taxmat) = c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species", "Strain")[1:ncol(taxmat)]
  rownames(taxmat) = rownames(tax)
  for (i in 1:nrow(taxmat)){
    taxmat[i, 1:length(x2[[i]])] <- x2[[i]]
  }
  taxmat = gsub("[a-z]__", "", taxmat)
  taxmat = phyloseq::tax_table(taxmat)
  otutab = phyloseq::otu_table(tax, taxa_are_rows=TRUE)
  if(is.null(metadat)){
    res = phyloseq::phyloseq(taxmat, otutab)
  }else{
    res = phyloseq::phyloseq(taxmat, otutab, phyloseq::sample_data(metadat))
  }
  return(res)
}
#end of script

#load mpa data and metadata tables
mphlanin <- read.csv("metagenomics_modified_db_no_F3.txt", sep = "\t", strip.white = T, stringsAsFactors = F, row.names = 1)
metadata <- read.delim("meta_no_F3.txt", header=TRUE, sep = "\t",row.names = 1)
phyloseqin= metaphlanToPhyloseq(mphlanin, metadat = metadata)
#phyloseqin = subset_taxa(phyloseqin, Kingdom == "all_taxa")
phyloseqin = tax_glom(phyloseqin, taxrank="Genus", NArm=FALSE)

#clr-transformed compositions of otu table
(ps_clr <- microbiome::transform(phyloseqin, "clr"))

ps_clr.limma <- removeBatchEffect(otu_table(ps_clr), batch = sample_data(ps_clr)$batch)

#ps_clr into OTU table  

ps_clr.limma.otu=otu_table(ps_clr.limma, taxa_are_rows = TRUE)
ps_clr.tax=tax_table(ps_clr)
mphlanin <- read.csv("metagenomics_modified_db_no_F3.txt", sep = "\t", strip.white = T, stringsAsFactors = F, row.names = 1)
metadata <- read.delim("meta_no_F3.txt", header=TRUE, sep = "\t",row.names = 1)
sampledata = sample_data(metadata)
ps=phyloseq(ps_clr.limma.otu, ps_clr.tax,sampledata)

# Loop t-test for all taxa
results <- data.frame()
for (i in 1:length(taxa_names(ps))){

  asv <- taxa_names(ps)[i]
  
  case_mclr <- mean(otu_table(subset_samples(ps, Sex == "Female"))[i])
  cont_mclr <- mean(otu_table(subset_samples(ps, Sex == "Male"))[i])
  mclrr <- case_mclr/cont_mclr
 
  pval <- t.test(as.vector(otu_table(ps)[i]) ~ sample_data(ps)$Sex)$p.value
  
  results <- rbind(results, data.frame(Representative_ASV = asv, 
                                       Case_Mean_CLR = case_mclr, 
                                       Control_Mean_CLR = cont_mclr, 
                                       Mean_CLR_Ratio = mclrr, 
                                       P = pval))
}
                                 
# Perform FDR correction for pvalues
results$FDR_BH <- p.adjust(results$P, method = 'BH')

# Add taxa designations to table
results <- inner_join(results, rownames_to_column(data.frame(tax_table(ps)), "Representative_ASV"), by = "Representative_ASV")

# Write out results
write.table(results, "all_taxa/removeBatcheffect_t_test_CLR_Sex.txt", quote = F, sep="\t", row.names = F)
